openapi: 3.0.3
info:
  title: Event System Management API 1.0
  version: 1.0.0
  description: Building API for Event System Management
paths:
  /api/auth/change-password/:
    post:
      operationId: api_auth_change_password_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/login/refresh/:
    post:
      operationId: api_auth_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/logout/:
    post:
      operationId: api_auth_logout_create
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/profile/:
    get:
      operationId: api_auth_profile_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_auth_profile_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: api_auth_profile_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/profile/edit/:
    get:
      operationId: api_auth_profile_edit_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_auth_profile_edit_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: api_auth_profile_edit_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/events/:
    get:
      operationId: api_events_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/:
    get:
      operationId: api_events_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSection'
          description: ''
  /api/events/{id}/update/:
    put:
      operationId: api_events_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    patch:
      operationId: api_events_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/create/:
    post:
      operationId: api_events_create_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/join/{id}/:
    post:
      operationId: api_events_join_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/events/sections/{id}/:
    get:
      operationId: api_events_sections_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
  /api/events/sections/{id}/delete/:
    put:
      operationId: api_events_sections_delete_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    patch:
      operationId: api_events_sections_delete_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSection'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    delete:
      operationId: api_events_sections_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/sections/{id}/update/:
    put:
      operationId: api_events_sections_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    patch:
      operationId: api_events_sections_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSection'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
  /api/events/sections/create/:
    post:
      operationId: api_events_sections_create_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
  /api/notifications/list/:
    get:
      operationId: api_notifications_list_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/read/{id}/:
    put:
      operationId: api_notifications_read_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: api_notifications_read_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        location:
          type: string
          maxLength: 255
        start_date:
          type: string
          format: date
        background_image:
          type: string
          format: uri
          nullable: true
        end_date:
          type: string
          format: date
        host:
          type: integer
          readOnly: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/UserEvent'
          readOnly: true
      required:
      - description
      - end_date
      - host
      - id
      - location
      - name
      - participants
      - start_date
    EventSection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        location:
          type: string
          maxLength: 255
        start_date:
          type: string
          format: date
        background_image:
          type: string
          format: uri
          nullable: true
        end_date:
          type: string
          format: date
        host:
          type: integer
          readOnly: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/UserEvent'
          readOnly: true
        create_at:
          type: string
          format: date-time
          readOnly: true
        update_at:
          type: string
          format: date-time
          readOnly: true
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
          readOnly: true
      required:
      - create_at
      - description
      - end_date
      - host
      - id
      - location
      - name
      - participants
      - sections
      - start_date
      - update_at
    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        message:
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        create_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - create_at
      - id
      - message
    NotificationTypeEnum:
      enum:
      - warning
      - info
      - error
      type: string
      description: |-
        * `warning` - Warning
        * `info` - Info
        * `error` - Error
    NullEnum:
      enum:
      - null
    PatchedEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        location:
          type: string
          maxLength: 255
        start_date:
          type: string
          format: date
        background_image:
          type: string
          format: uri
          nullable: true
        end_date:
          type: string
          format: date
        host:
          type: integer
          readOnly: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/UserEvent'
          readOnly: true
    PatchedNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        message:
          type: string
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        create_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        speaker:
          type: string
          nullable: true
          maxLength: 255
        location:
          type: string
          nullable: true
          maxLength: 255
        start_datetime:
          type: string
          format: date-time
          nullable: true
        end_datetime:
          type: string
          format: date-time
          nullable: true
        event:
          type: integer
          writeOnly: true
    PatchedUserProfile:
      type: object
      properties:
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        dob:
          type: string
          format: date
          nullable: true
        sex:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SexEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          readOnly: true
        country:
          type: string
          nullable: true
          maxLength: 100
        profile_image:
          type: string
          format: uri
          nullable: true
    Section:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        speaker:
          type: string
          nullable: true
          maxLength: 255
        location:
          type: string
          nullable: true
          maxLength: 255
        start_datetime:
          type: string
          format: date-time
          nullable: true
        end_datetime:
          type: string
          format: date-time
          nullable: true
        event:
          type: integer
          writeOnly: true
      required:
      - description
      - event
      - id
      - name
    SexEnum:
      enum:
      - M
      - F
      type: string
      description: |-
        * `M` - Male
        * `F` - Female
    StatusEnum:
      enum:
      - read
      - unread
      type: string
      description: |-
        * `read` - Read
        * `unread` - Unread
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    UserEvent:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        profile_image:
          type: string
          format: uri
          nullable: true
      required:
      - username
    UserProfile:
      type: object
      properties:
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        dob:
          type: string
          format: date
          nullable: true
        sex:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SexEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          readOnly: true
        country:
          type: string
          nullable: true
          maxLength: 100
        profile_image:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - user_type
      - username
    UserRegistration:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - email
      - password
    UserTypeEnum:
      enum:
      - hosting
      - normal
      type: string
      description: |-
        * `hosting` - Hosting
        * `normal` - Normal User
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
